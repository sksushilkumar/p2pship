#summary Multiparty conferencing
#labels Phase-Design

= Introduction =

Multiparty communication is an important feature of any communication system. By supporting standard SIP signalling, the p2pship system is implicitly supporting already multiparty conferencing, although only client-based (i.e. only when the SIP client used implements the feature, using multiple concurrent calls and client-side audio mixing).

The goal of the multiparty conferencing effort for p2pship is to create a transparent subsystem which allows also legacy (one-to-one) clients to establish conference calls. Preferably the system will be rather independent from the SIP subsystem, allowing possible future communication protocols (XMPP etc) to join cross-protocol conferences (SIP and XMPP users talking to each other). This will however depend much on the semantics of the protocols.

== Conferencing overview ==

_todo: General overview of conferencing alternatives in P2P: Use of centralized peer-server for maintaining the conference. Full-mesh architecture. Opportunistic multi-proxy architecture_

== Current SIP/P2PSIP efforts ==

_todo: description of the current state of MMUSIC conferencing / other SIP-based solutions_

== Design alternatives ==

_todo: different types of topologies. We are heading for a hybrid / opportunistic one_

=== Naming sessions ===

_todo: how sessions are identified. Protocol specific, SIP for now_

=== Access & conference control ===

_todo: how to limit participants. In general, and how to translate that into SIP syntax_

= Milestones overview =

The first goal is to enable legacy SIP clients to establish conference calls.

The initial plan is to use a centralized peer-proxy architecture, but hopefully extend it into an opportunistic multi-proxy- like architecture. That is, the first step is to have one peer _host_ the conference. This peer will do the audio mixing for all other participants.

The second step is to extend this model so that all participating peers will actually create small 'mini' mixers for the conference call. This can be used as before, having actually just one peer acting as a center and creating the different audiostreams for each user. The mixer within the other participants would be a dummy one; having only one input and one output stream.

But, it would enable also that new peers could join the conference by calling into any one of the participating peers, which would result in that (second host) having two inputs and two outputs (of which the input from the first host would actually contain multiple audiostreams mixed together, which would be mixed with the local source and sent to the new participant).

== Milestone 1 ==

SIP support for basic centralized conferencing on a P2P network:

 * Support for identity aliases (use of *+conference_id*)
   * _e.g., jookos@example.com could host the conference jookos+conference@example.com_
 * Subsystem for handling these (essentially a small communication client within the proxy)
 * Support for IM conferencing

== Milestone 2 ==

 * Support for audio conferencing

== Milestone 3 ==

 * Support for multi-proxy topology
